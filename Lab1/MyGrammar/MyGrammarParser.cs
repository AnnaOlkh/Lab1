//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MyGrammar.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class MyGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, CELL=13, NUMBER=14, WS=15, INVALID=16;
	public const int
		RULE_expression = 0, RULE_exprList = 1;
	public static readonly string[] ruleNames = {
		"expression", "exprList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*'", "'/'", "'^'", "'div'", "'mod'", "'+'", "'-'", "'max'", "'('", 
		"')'", "'min'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "CELL", "NUMBER", "WS", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MyGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MyGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MyGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinFunctionContext : ExpressionContext {
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public MinFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterMinFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitMinFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(MyGrammarParser.NUMBER, 0); }
		public NumberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxFunctionContext : ExpressionContext {
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public MaxFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterMaxFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitMaxFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeOrPowerExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeOrPowerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterMultiplicativeOrPowerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitMultiplicativeOrPowerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeOrPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CellContext : ExpressionContext {
		public ITerminalNode CELL() { return GetToken(MyGrammarParser.CELL, 0); }
		public CellContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				{
				_localctx = new MaxFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5; Match(T__7);
				State = 6; Match(T__8);
				State = 7; exprList();
				State = 8; Match(T__9);
				}
				break;
			case T__10:
				{
				_localctx = new MinFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 10; Match(T__10);
				State = 11; Match(T__8);
				State = 12; exprList();
				State = 13; Match(T__9);
				}
				break;
			case T__8:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 15; Match(T__8);
				State = 16; expression(0);
				State = 17; Match(T__9);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19; Match(NUMBER);
				}
				break;
			case CELL:
				{
				_localctx = new CellContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 20; Match(CELL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 31;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 29;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeOrPowerExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicativeOrPowerExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 23;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 24;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 25; ((MultiplicativeOrPowerExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 26;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 27;
						_la = TokenStream.LA(1);
						if ( !(_la==T__5 || _la==T__6) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 28; ((AdditiveExpressionContext)_localctx).right = expression(7);
						}
						break;
					}
					} 
				}
				State = 33;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 2, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; expression(0);
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 35; Match(T__11);
				State = 36; expression(0);
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', '-', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x18', '\n', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', ' ', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'#', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'(', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '+', '\v', '\x3', '\x3', 
		'\x3', '\x2', '\x3', '\x2', '\x4', '\x2', '\x4', '\x2', '\x4', '\x3', 
		'\x2', '\x3', '\a', '\x3', '\x2', '\b', '\t', '\x2', '\x31', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '$', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\a', '\b', '\x2', '\x1', '\x2', '\a', '\b', '\a', '\n', '\x2', '\x2', 
		'\b', '\t', '\a', '\v', '\x2', '\x2', '\t', '\n', '\x5', '\x4', '\x3', 
		'\x2', '\n', '\v', '\a', '\f', '\x2', '\x2', '\v', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\r', '\a', '\r', '\x2', '\x2', '\r', '\xE', '\a', 
		'\v', '\x2', '\x2', '\xE', '\xF', '\x5', '\x4', '\x3', '\x2', '\xF', '\x10', 
		'\a', '\f', '\x2', '\x2', '\x10', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\x12', '\a', '\v', '\x2', '\x2', '\x12', '\x13', '\x5', '\x2', 
		'\x2', '\x2', '\x13', '\x14', '\a', '\f', '\x2', '\x2', '\x14', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x18', '\a', '\x10', '\x2', '\x2', 
		'\x16', '\x18', '\a', '\xF', '\x2', '\x2', '\x17', '\x6', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\f', '\x3', '\x2', '\x2', '\x2', '\x17', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x1A', '\f', '\t', '\x2', '\x2', '\x1A', '\x1B', 
		'\t', '\x2', '\x2', '\x2', '\x1B', ' ', '\x5', '\x2', '\x2', '\n', '\x1C', 
		'\x1D', '\f', '\b', '\x2', '\x2', '\x1D', '\x1E', '\t', '\x3', '\x2', 
		'\x2', '\x1E', ' ', '\x5', '\x2', '\x2', '\t', '\x1F', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x1C', '\x3', '\x2', '\x2', '\x2', ' ', 
		'#', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '$', ')', '\x5', '\x2', '\x2', 
		'\x2', '%', '&', '\a', '\xE', '\x2', '\x2', '&', '(', '\x5', '\x2', '\x2', 
		'\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x5', '\x3', '\x2', '\x2', '\x2', '+', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x17', '\x1F', '!', ')',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
